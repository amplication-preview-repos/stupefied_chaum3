/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { Delivery } from "./Delivery";
import { DeliveryCountArgs } from "./DeliveryCountArgs";
import { DeliveryFindManyArgs } from "./DeliveryFindManyArgs";
import { DeliveryFindUniqueArgs } from "./DeliveryFindUniqueArgs";
import { DeleteDeliveryArgs } from "./DeleteDeliveryArgs";
import { DeliveryService } from "../delivery.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Delivery)
export class DeliveryResolverBase {
  constructor(
    protected readonly service: DeliveryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Delivery",
    action: "read",
    possession: "any",
  })
  async _deliveriesMeta(
    @graphql.Args() args: DeliveryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Delivery])
  @nestAccessControl.UseRoles({
    resource: "Delivery",
    action: "read",
    possession: "any",
  })
  async deliveries(
    @graphql.Args() args: DeliveryFindManyArgs
  ): Promise<Delivery[]> {
    return this.service.deliveries(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Delivery, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Delivery",
    action: "read",
    possession: "own",
  })
  async delivery(
    @graphql.Args() args: DeliveryFindUniqueArgs
  ): Promise<Delivery | null> {
    const result = await this.service.delivery(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Delivery)
  @nestAccessControl.UseRoles({
    resource: "Delivery",
    action: "delete",
    possession: "any",
  })
  async deleteDelivery(
    @graphql.Args() args: DeleteDeliveryArgs
  ): Promise<Delivery | null> {
    try {
      return await this.service.deleteDelivery(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
